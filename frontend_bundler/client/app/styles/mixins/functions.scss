@mixin generate-rules($rules) {
  @each $property, $value in $rules {
    #{$property}: #{$value};
  }
}

//A function for filling in a map variable with default values
@function defaultTo($mapVariable, $defaultMap) {
  //if it's a map, treat each setting in the map seperately
  @if (type-of($defaultMap) == "map" ) {
    // We iterate over each property of the defaultMap
    @each $key, $value in $defaultMap {
      // If the variable map does not have the associative key
      @if (not map-has-key($mapVariable, $key)) {
        // add it to finalParams
        $mapVariable: map-merge($mapVariable, ($key : $value));
      }
    }

    @return $mapVariable;

    //Throw an error message if not a map
  } @else {
    @error "The defaultTo function only works for Sass maps";
  }
}


@function rem($pixels) {
  @if (type-of($pixels) == "list") {
    $values: ();
    @each $value in $pixels {
      $values: append($values, rem($value));
    }
    @return $values;
  }
  @if (unitless($pixels)) {
    $pixels: $pixels * 1px;
  }
  @if(index("rem", unit($pixels)) != null) {
    @return $pixels;
  }
  @return #{$pixels / $font-size-default}rem;
}

@function to-number($value) {
  $result: 0;
  $digits: 0;
  $minus: str-slice($value, 1, 1) == "-";
  $numbers: ("0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9);
  @if type-of($value) == "number" {
    @return $value;
  } @else if type-of($value) != "string" {
    $_: log("Value for `to-number` should be a number or a string.");
  }

  @for $i from if($minus, 2, 1) through str-length($value) {
    $character: str-slice($value, $i, $i);

    @if not (index(map-keys($numbers), $character) or $character == ".") {
      @return to-length(if($minus, -$result, $result), str-slice($value, $i))
    }

    @if $character == "." {
      $digits: 1;
    } @else if $digits == 0 {
      $result: $result * 10 + map-get($numbers, $character);
    } @else {
      $digits: $digits * 10;
      $result: $result + map-get($numbers, $character) / $digits;
    }
  }

  @return if($minus, -$result, $result);;
}


///
/// Add `$unit` to `$value`
///
/// @param {Number} $value - Value to add unit to
/// @param {String} $unit - String representation of the unit
///
/// @return {Number} - `$value` expressed in `$unit`
///
@function to-length($value, $unit) {
  $units: ("px": 1px, "cm": 1cm, "mm": 1mm, "%": 1%, "ch": 1ch, "pc": 1pc, "in": 1in, "em": 1em, "rem": 1rem, "pt": 1pt, "ex": 1ex, "vw": 1vw, "vh": 1vh, "vmin": 1vmin, "vmax": 1vmax);

  @if not index(map-keys($units), $unit) {
    $_: log("Invalid unit `#{$unit}`.");
  }

  @return $value * map-get($units, $unit);
}

@function str-split($string, $separator: " ") {
  // empty array/list
  $split-arr: ();
  // first index of separator in string
  $index: str-index($string, $separator);
  // loop through string
  @while $index != null {
    // get the substring from the first character to the separator
    $item: str-slice($string, 1, $index - 1);
    // push item to array
    $split-arr: append($split-arr, $item);
    // remove item and separator from string
    $string: str-slice($string, $index + 1);
    // find new index of separator
    $index: str-index($string, $separator);
  }


  @if (true) {
    $split-arr: append($split-arr, $string); // scss-lint:disable ImportantRule
  }

  @return $split-arr;
}
